package image ;


public class ImageTab implements ImageGrise {
    private int largeur;
    private int hauteur;
    public static Couple<K,V>[] niveauGris;

    public ImageTab (int largeur, int hauteur){
	this.largeur = largeur;
	this.hauteur = hauteur;
	this.niveauGris =(Couple<K,V>[]) new NiveauGris[largeur][hauteur];
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		niveauGris[i][j]=NiveauGris.BLANC;
	    }
	}
    }
    /** Retourne la largeur de l'image */
    public int largeur() {
	return this.largeur;
    }
    /** Retourne la hauteur de l'image */
    public int hauteur() {
	return this.hauteur;
    }
    /** Retourne le niveau de gris du point de coordonnées (x,y) */
    public NiveauGris pointEn(int x, int y){
	return niveauGris[x][y];
    }
    /** Fixe le niveau de gris du point de coordonnées (x,y) à la valeur spécifiée */
    public void definirPoint(int x, int y, NiveauGris gris) {
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		niveauGris[x][y].equals(gris);
	    }
	}
    }
    /** Met en noir le point de coordonnées (x,y) */
    public void allumer(int x, int y) {
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		niveauGris[x][y].equals(NiveauGris.NOIR);
	    }
	}
    }
    /** Met en blanc le point de coordonnées (x,y) */
    public void eteindre(int x, int y) {
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		niveauGris[x][y].equals(NiveauGris.BLANC);
	    }
	}
    }
    /** Donne une valeur aléatoire (noir ou blanc) à chaque point de l'image */
    public void randomize() {
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		niveauGris[i][j].randomizeNB();
	    }
	}
    }
    /** Compte le nombre de points de l'image dont le niveau de gris est égal au niveau spécifié */
    public int compterPoints(NiveauGris gris) {
	int cpt=0;
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		if (pointEn(i,j).equals(gris)){
		    cpt+=1;
		}
	    }
	}
	return cpt;
    }
    /** Retourne une image qui est le négatif de l'image courante */
    public ImageGrise inverser() {
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		pointEn(i,j).inverser();
	    }
	}
	return new ImageTab(largeur, hauteur);
    }
    /** Retourne une image dont tous les points (sauf blancs) sont un niveau
     * plus clair que dans l'image courante */
    public ImageGrise eclaircir() {
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		if (!niveauGris[i][j].estBlanc()){
		    pointEn(i,j).eclaircir();
		}
	    }
	}
	return new ImageTab(largeur,hauteur);
    }
    /** Retourne une image dont tous les points (sauf noirs) sont un niveau
     * plus foncé que dans l'image courante */
    public ImageGrise assombrir() {
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		if (!niveauGris[i][j].estNoir()){
		    pointEn(i,j).assombrir();
		}
	    }
	}	
	return new ImageTab(largeur,hauteur);
    }
    /** Retourne une <B>copie</B> de l'image courante */
    public ImageGrise dupliquer() {
	ImageTab image=new ImageTab(largeur,hauteur);
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		niveauGris[i][j]=image.niveauGris[i][j];
	    }
	}	
	return image;
    }
    /** Retourne une image en additionnant point par point les niveaux de gris de l'image 
     * courante et de l'image en paramètre (les deux images doivent être de même taille) */
    public ImageGrise ajouter(ImageGrise img) {
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		pointEn(i,j).ajouter(img.pointEn(i,j));
	    }
	}
	return new ImageTab(largeur,hauteur);
    }
    /** Retourne une image en retranchant point par point les niveaux de gris de l'image 
     * courante et de l'image en paramètre (les deux images doivent être de même taille) */
    public ImageGrise soustraire(ImageGrise img) {
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		pointEn(i,j).soustraire(img.pointEn(i,j));
	    }
	}
	return new ImageTab(largeur,hauteur);
    }
    /** Retourne une image en faisant un OU Exclusif (XOR) point par
     * point les niveaux de gris de l'image courante et de l'image en
     * paramètre (les deux images doivent être de même taille) */
    public ImageGrise XOR(ImageGrise img) {
	if(this.largeur()==img.largeur() &&
	   this.hauteur()==img.hauteur()){
	    for (int i=0; i<largeur; i++){
		for (int j=0; j<hauteur; j++){
		    pointEn(i,j).XOR(img.pointEn(i,j));
		}
	    }
	}
	return new ImageTab(largeur,hauteur);
    }
    /** Retourne une image qui représente "l'intersection" de l'image courante et de l'image 
     * en paramètre : seuls les points qui ont le même niveau de gris dans les deux images sont
     * conservés (les deux images doivent être de même taille) */
    public ImageGrise intersection(ImageGrise img) {
	ImageTab image=new ImageTab(largeur,hauteur);
	if(this.largeur()==img.largeur() &&
	   this.hauteur()==img.hauteur()){
	    for (int i=0; i<largeur; i++){
		for (int j=0; j<hauteur; j++){
		    if (pointEn(i,j).equals(img.pointEn(i,j))) {
			image.niveauGris[i][j]=niveauGris[i][j];
		    }
		}
	    }
	    return image;
	}
	return null;
    }
    /** Retourne le niveau de gris moyen de l'image. Pour le calculer, il faut faire la 
     * moyenne des niveaux de chaque point de l'image (ce qui revient à compter combien il y
     * a de points de chaque niveau de gris possible) */
    public NiveauGris niveauMoyen() {
	NiveauGris moyenne=null;
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		for (int nB=0; nB<compterPoints(NiveauGris.BLANC); nB++){
		    moyenne.ajouter(NiveauGris.BLANC);
		}
		for (int nGc=0; nGc<compterPoints(NiveauGris.GRIS_CLAIR); nGc++){
		    moyenne.ajouter(NiveauGris.GRIS_CLAIR);
		}
		for (int nGm=0; nGm<compterPoints(NiveauGris.GRIS_MOYEN); nGm++){
		    moyenne.ajouter(NiveauGris.GRIS_MOYEN);
		}
		for (int nGf=0; nGf<compterPoints(NiveauGris.GRIS_FONCE); nGf++){
		    moyenne.ajouter(NiveauGris.GRIS_FONCE);
		}
		for (int nN=0; nN<compterPoints(NiveauGris.NOIR); nN++){
		    moyenne.ajouter(NiveauGris.NOIR);
		}
	    }
	}
	return moyenne;
    }

    /** Retourne une image obtenue en augmentant le contraste de l'image courante. Pour 
     * augmenter le contraste, il faut rendre les points sombres plus sombres qu'ils ne sont, 
     * et les points clairs plus clairs. Un bon moyen de procéder consiste à calculer le 
     * niveau de gris moyen de l'image, et assombrir (respectivement eclaircir) les points 
     * plus sombres (resp. plus clairs) que ce niveau moyen */
    public ImageGrise augmenterContraste() {
	for (int i=0; i<largeur; i++){
	    for (int j=0; j<hauteur; j++){
		if (pointEn(i,j).compareTo(niveauMoyen()) <= 0) {
		    pointEn(i,j).eclaircir();
		}
		else if (pointEn(i,j).compareTo(niveauMoyen()) > 0) {
		    pointEn(i,j).assombrir();
		}
	    }
	}
	return new ImageTab(largeur,hauteur);
    }
}
